section .data
    ; Define an array of bytes to compare with
    my_array db 226, 203, 201, 193, 255, 254, 254, 209, 227, 245, 203, 199, 245, 222, 194, 207, 245, 218, 203, 201, 193, 207, 216, 215  ; example array

    ; Define the XOR key
    xor_key db 0xAA  ; key to XOR input with

    ; Define the length of the array
    array_len equ 5  ; number of elements in my_array

    ; win string
    win_string db 'Bravo le flag est: ' 

    ; loose string
    loose_string db 'Perdu !', 0xA  ; The string to print followed by a newline (0xA)

    input_string db 'Input: '

section .bss
    input resb 0x100  ; reserve space for a single byte input


section .text
    global _start

_start:

    mov rax, 1          ; syscall number for sys_write
    mov rdi, 1          ; file descriptor 1 (stdout)
    mov rsi, input_string
    mov rdx, 7          ; read 1 byte
    syscall             ; make the syscall

    ; Step 1: Read a byte from the user (stdin)
    mov rax, 0          ; syscall number for sys_read (0)
    mov rdi, 0          ; file descriptor 0 (stdin)
    mov rsi, input      ; address of the input buffer
    mov rdx, 0x100          ; read 1 byte
    syscall             ; make the syscall

    ; Step 2: XOR the input byte with the predefined key
    mov rdi, input
    mov rcx, 0
xor_loop:
    mov bl, [xor_key]
    xor [rdi], bl
    inc rdi
    inc rcx
    cmp rcx, rax
    jl xor_loop

    ; Step 3: Compare the XOR result with each element of the array
    mov rdi, input     ; load the XORed input byte into AL
    mov rcx, 0          ; array index (counter)
compare_loop:
    mov bl, [my_array + rcx]  ; load array element into BL
    cmp [rdi], bl          ; compare XORed input with array element
    jne loose      ; if equal (match), jump to found_match
    inc rdi
    inc rcx             ; otherwise, move to the next element in the array
    cmp rcx, rax  ; check if we've checked all elements
    jl compare_loop     ; if not, continue the loop
    jmp win

loose:
    mov rax, 1          ; syscall number for sys_write
    mov rdi, 1          ; file descriptor 1 (stdout)
    mov rsi, loose_string      ; address of the input buffer
    mov rdx, 8          ; read 1 byte
    syscall             ; make the syscall
    jmp exit

win:
    mov rdx, 19
    mov rax, 1          ; syscall number for sys_write
    mov rdi, 1          ; file descriptor 1 (stdout)
    mov rsi, win_string      ; address of the input buffer
    syscall             ; make the syscall

    mov rdx, 0xa7475706e69276c
    mov [rsi], rdx
    mov rdx, 8
    mov rax, 1          ; syscall number for sys_write
    syscall
    jmp exit

exit:
    mov rax, 60         ; syscall number for sys_exit (60)
    xor rdi, rdi        ; return code 0
    syscall             ; make the syscall