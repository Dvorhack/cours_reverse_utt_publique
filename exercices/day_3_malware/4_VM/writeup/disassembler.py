code = bytes.fromhex

# Convert to int array
code = [int.from_bytes(code[x:x+4], byteorder='little') for x in range(0, len(code), 4)]

# Disass every instruction
pc = 0
while pc != len(code):
    print(f"Addr: {pc:#2x}\t",end='')
    match code[pc]:

        case 0x01:
            print("ADD")

        case 0x03:
            print("MUL")

        case 0x05:
            print("is ==")

        case 0x06:
            pc += 1
            arg = code[pc]
            print(f"Jump ({arg :#x})")
        
        case 0x07:
            pc += 1
            arg = code[pc]
            print(f"Jump if equals ({arg :#x})")

        case 0x09:
            pc += 1
            arg = code[pc]
            print(f"Load CONST ({arg :#x})")

        case 0x0A:
            pc += 1
            arg = code[pc]
            print(f"Load arg ({arg :#x})")

        case 0x0C:
            pc += 1
            arg = code[pc]
            print(f"Store local ({arg :#x})")

        case 0x0E:
            print("PUTC")

        case 0x0F:
            print("GETC")

        case 0x11:
            pc += 1
            arg1 = code[pc]
            pc += 1
            arg2 = code[pc]
            pc += 1
            arg3 = code[pc]
            print(f"CALL {arg1 = :#x} {arg2 = :#x} {arg3 = :#x}")

        case 0x12:
            print("RET")

        case _:
            print(f"Unknown opcode: {hex(code[pc])}")
            exit(0)

    pc += 1